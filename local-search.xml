<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>设计模式七大原则</title>
    <link href="/2020/06/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    <url>/2020/06/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式七大原则"><a href="#设计模式七大原则" class="headerlink" title="设计模式七大原则"></a>设计模式七大原则</h1><p>设计模式体现了代码的耦合性， 内聚性以及可维护性，可扩展性，重用性，灵活性。</p><ol><li>代码重用性（即：相同功能的代码，不用多次编写）</li><li>可读性（即：编程规范性，便于其他程序员的阅读和理解）</li><li>可扩展性（即：当需要增加新的功能时，非常的方便，称为可维护）</li><li>可靠性（即：当我们增加新的功能后，对原来的功能没有影响）</li><li>使程序呈现高内聚，低耦合的特性</li></ol><p><em>Scott Mayers在其巨著《Effective C++》说过: C++老手和C++新手的区别就是前者手背上有很多伤疤。</em></p><ul><li>同样是面向对象，当然也可指 Java</li></ul><h2 id="一、单一职责原则（Single-responsibility）"><a href="#一、单一职责原则（Single-responsibility）" class="headerlink" title="一、单一职责原则（Single responsibility）"></a>一、单一职责原则（Single responsibility）</h2><p>单一职责原则注意事项和细节：</p><ol><li>降低类的复杂度，一个类只负责一项职责；</li><li>提高类的可读性，可维护性；</li><li>降低变更引起的风险;</li><li>通常情况下，应当遵守单一职责原则， 只有逻辑足够简单，才可以在方法级违反单一职责原则。</li></ol><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : lwj</span><span class="hljs-comment"> * createTime  : 2020/6/30 19:42</span><span class="hljs-comment"> * description : Reprint please indicate the source</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * 只有类中方法数量足够少，可以在方法级别保持单一职责原则</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleResponsibility</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Vehicle vehicle = <span class="hljs-keyword">new</span> Vehicle();        vehicle.run(<span class="hljs-string">"柯尼塞格"</span>);        vehicle.fly(<span class="hljs-string">"波音747"</span>);    &#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 逻辑简单，方法级别实现单一职责</span><span class="hljs-comment"> * 逻辑复杂，分类实现单一职责</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vehicle</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(String string)</span> </span>&#123;        System.out.println(string + <span class="hljs-string">"：是陆地交通工具"</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fly</span><span class="hljs-params">(String string)</span> </span>&#123;        System.out.println(string + <span class="hljs-string">"：是空中交通工具"</span>);    &#125;&#125;</code></pre></div><h2 id="二、接口隔离原则（Interface-Segregation）"><a href="#二、接口隔离原则（Interface-Segregation）" class="headerlink" title="二、接口隔离原则（Interface Segregation）"></a>二、接口隔离原则（Interface Segregation）</h2><ol><li>类A通过接口 Interface1、2 依赖类B，类C通过接口 Interface1、3 依赖类D，如果接口 Interface 对于 类A 和 类C 来说不是最小接口，那么 类B 和 类D 必须去实现他们不需要的方法。</li><li>将接口 Interface 拆分为独立的几个接口，类A 和 类C 分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则。</li><li>接口 Interface 中出现的方法，根据实际情祝拆分为三个接口。<br><img src="https://i.loli.net/2020/06/30/8rCg7WDYnPzoc19.png" srcset="/img/loading.gif" alt="image.png"></li></ol><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : lwj</span><span class="hljs-comment"> * createTime  : 2020/6/30 19:49</span><span class="hljs-comment"> * description : Reprint please indicate the source</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterfaceSegregation</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        A a = <span class="hljs-keyword">new</span> A();        a.depend1(<span class="hljs-keyword">new</span> B());        a.depend2(<span class="hljs-keyword">new</span> B());        a.depend3(<span class="hljs-keyword">new</span> B());        C c = <span class="hljs-keyword">new</span> C();        c.depend1(<span class="hljs-keyword">new</span> D());        c.depend4(<span class="hljs-keyword">new</span> D());        c.depend5(<span class="hljs-keyword">new</span> D());    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">interface1</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation1</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">interface2</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation2</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation3</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">interface3</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation4</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation5</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">interface1</span>, <span class="hljs-title">interface2</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Operation1</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"B 实现了 Operation1"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Operation2</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"B 实现了 Operation2"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Operation3</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"B 实现了 Operation3"</span>);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">interface1</span>, <span class="hljs-title">interface3</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Operation1</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"D 实现了 Operation1"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Operation4</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"D 实现了 Operation4"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Operation5</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"D 实现了 Operation5"</span>);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend1</span><span class="hljs-params">(interface1 i)</span> </span>&#123;        i.Operation1();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend2</span><span class="hljs-params">(interface2 i)</span> </span>&#123;        i.Operation2();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend3</span><span class="hljs-params">(interface2 i)</span> </span>&#123;        i.Operation3();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend1</span><span class="hljs-params">(interface1 i)</span> </span>&#123;        i.Operation1();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend4</span><span class="hljs-params">(interface3 i)</span> </span>&#123;        i.Operation4();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend5</span><span class="hljs-params">(interface3 i)</span> </span>&#123;        i.Operation5();    &#125;&#125;</code></pre></div><h2 id="三、依赖倒转原则（Dependence-Inversion）"><a href="#三、依赖倒转原则（Dependence-Inversion）" class="headerlink" title="三、依赖倒转原则（Dependence Inversion）"></a>三、依赖倒转原则（Dependence Inversion）</h2><ol><li>高层模块不应该依赖低层模块，二者都应该依赖其抽象（缓冲层）；</li><li>抽象不应该依赖细节，细节应该依赖抽象；</li><li>依赖倒转(倒置)的中心思想是面向接口编程;</li><li>依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在java中， 抽象指的是接口或抽象类，细节就是具体的实现类；</li><li>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成。</li></ol><p><strong>依赖关系三种传递方式：</strong></p><ul><li>接口传递（依赖）</li><li>构造方法传递（依赖）</li><li>setter方式传递（聚合）</li></ul><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : lwj</span><span class="hljs-comment"> * createTime  : 2020/6/30 19:51</span><span class="hljs-comment"> * description : Reprint please indicate the source</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependenceInversion</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Person person = <span class="hljs-keyword">new</span> Person();        person.receive(<span class="hljs-keyword">new</span> Email());        person.receive(<span class="hljs-keyword">new</span> WeChat());    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Info</span></span>&#123;    <span class="hljs-function">String <span class="hljs-title">getInfo</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Email</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Info</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getInfo</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"Receive Email"</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeChat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Info</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getInfo</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"Receive WeChat"</span>;    &#125;&#125;<span class="hljs-comment">//person 接受信息</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">(Info info)</span> </span>&#123;        System.out.println(info.getInfo());    &#125;&#125;</code></pre></div><h2 id="四、里氏替换原则（Liskov-Substitution）"><a href="#四、里氏替换原则（Liskov-Substitution）" class="headerlink" title="四、里氏替换原则（Liskov Substitution）"></a>四、里氏替换原则（Liskov Substitution）</h2><ol><li>里氏替换原则(Liskov Substitution Principle)在1988年，由麻省理工学院一位姓里的女士提出；</li><li>如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。换句话说，所有引用基类的地方必须能透明地使用其子类的对象；</li><li>在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法；</li><li>继承实际上让两个类耦合性增强了，给程序带来侵入性。在适当的情况下，可以通过聚合，组合，依赖来解决问题；</li><li>继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。</li></ol><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : lwj</span><span class="hljs-comment"> * createTime  : 2020/6/30 19:56</span><span class="hljs-comment"> * description : Reprint please indicate the source</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LiskovSubstitution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        A a = <span class="hljs-keyword">new</span> A();        System.out.println(<span class="hljs-string">"2 - 1 = "</span> + a.func1(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>));        B b = <span class="hljs-keyword">new</span> B();        System.out.println(<span class="hljs-string">"2 + 1 = "</span> + b.func1(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>));        System.out.println(<span class="hljs-string">"2 + 1 + 9 = "</span> + b.func2(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>));        System.out.println(<span class="hljs-string">"B类使用A类方法：2 - 1 = "</span> + b.func3(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>));    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> </span>&#123;    <span class="hljs-comment">//把基础方法和成员抽取成基类</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1, <span class="hljs-keyword">int</span> num2)</span> </span>&#123;        <span class="hljs-keyword">return</span> num1 - num2;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span> </span>&#123;<span class="hljs-comment">//    public int func1(int num1, int num2) &#123;</span><span class="hljs-comment">//        return num1 - num2;</span><span class="hljs-comment">//    &#125;</span>&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span> </span>&#123;    <span class="hljs-comment">// TODO 类 B `无意` 重写了父类 A 方法，造成原有方法发生改变。</span><span class="hljs-comment">//    @Override</span><span class="hljs-comment">//    public int func1(int num1, int num2) &#123;</span><span class="hljs-comment">//        return num1 + num2;</span><span class="hljs-comment">//    &#125;</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1, <span class="hljs-keyword">int</span> num2)</span> </span>&#123;        <span class="hljs-keyword">return</span> num1 + num2;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1, <span class="hljs-keyword">int</span> num2)</span> </span>&#123;        <span class="hljs-keyword">return</span> func1(num1, num2) + <span class="hljs-number">9</span>;    &#125;    <span class="hljs-keyword">private</span> A a = <span class="hljs-keyword">new</span> A();<span class="hljs-comment">//组合</span>    <span class="hljs-comment">//使用 A 方法</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">func3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1, <span class="hljs-keyword">int</span> num2)</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.a.func1(num1, num2);    &#125;&#125;</code></pre></div><h2 id="五、开闭原则-OCP（Open-Closed）"><a href="#五、开闭原则-OCP（Open-Closed）" class="headerlink" title="五、开闭原则 OCP（Open Closed）"></a>五、开闭原则 OCP（Open Closed）</h2><ol><li>开闭原则(Open Closed Principle) 是编程中最基础、最重要的设计原则；</li><li>一个软件实体，比如类，模块和函数应该对提供方扩展开放，对使用方修改关闭。用抽象构建框架，用实现扩展细节；</li><li>当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化；</li><li>编程中遵循其它原则，以及使用设计模式的目的就是遵循开闭原则。</li></ol><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : lwj</span><span class="hljs-comment"> * createTime  : 2020/6/30 19:49</span><span class="hljs-comment"> * description : Reprint please indicate the source</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterfaceSegregation</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        A a = <span class="hljs-keyword">new</span> A();        a.depend1(<span class="hljs-keyword">new</span> B());        a.depend2(<span class="hljs-keyword">new</span> B());        a.depend3(<span class="hljs-keyword">new</span> B());        C c = <span class="hljs-keyword">new</span> C();        c.depend1(<span class="hljs-keyword">new</span> D());        c.depend4(<span class="hljs-keyword">new</span> D());        c.depend5(<span class="hljs-keyword">new</span> D());    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">interface1</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation1</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">interface2</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation2</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation3</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">interface3</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation4</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation5</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">interface1</span>, <span class="hljs-title">interface2</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Operation1</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"B 实现了 Operation1"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Operation2</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"B 实现了 Operation2"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Operation3</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"B 实现了 Operation3"</span>);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">interface1</span>, <span class="hljs-title">interface3</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Operation1</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"D 实现了 Operation1"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Operation4</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"D 实现了 Operation4"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Operation5</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"D 实现了 Operation5"</span>);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend1</span><span class="hljs-params">(interface1 i)</span> </span>&#123;        i.Operation1();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend2</span><span class="hljs-params">(interface2 i)</span> </span>&#123;        i.Operation2();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend3</span><span class="hljs-params">(interface2 i)</span> </span>&#123;        i.Operation3();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend1</span><span class="hljs-params">(interface1 i)</span> </span>&#123;        i.Operation1();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend4</span><span class="hljs-params">(interface3 i)</span> </span>&#123;        i.Operation4();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend5</span><span class="hljs-params">(interface3 i)</span> </span>&#123;        i.Operation5();    &#125;&#125;</code></pre></div><h2 id="六、迪米特法则（Demeter）"><a href="#六、迪米特法则（Demeter）" class="headerlink" title="六、迪米特法则（Demeter）"></a>六、迪米特法则（Demeter）</h2><p>1.一个对象应该对其他对象保持最少的了解（最少知道原则 LKP）。<br>2. 类与类关系越密切，耦合度越大。要求降低类之间耦合，而不是完全解耦。<br>3. 迪米特法则(Demeter Principle)，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供public方法，不对外泄露任何信息。<br>4. 迪米特法则更简单的定义：只与直接的朋友通信。<br>5. 直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合 等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : lwj</span><span class="hljs-comment"> * createTime  : 2020/6/28 19:58</span><span class="hljs-comment"> * description : Reprint please indicate the source</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demeter</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SchoolManager schoolManager = <span class="hljs-keyword">new</span> SchoolManager();        schoolManager.printAllEmployee(<span class="hljs-keyword">new</span> CollegeManager());    &#125;&#125;<span class="hljs-comment">//学院员工类</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollegeEmployee</span> </span>&#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(String id)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;    &#125;&#125;<span class="hljs-comment">//管理学院员工的管理类:</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollegeManager</span> </span>&#123;    <span class="hljs-comment">//返回学院的所有员工 //TODO CollegeEmployee 直接朋友</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;CollegeEmployee&gt; <span class="hljs-title">getAllEmployee</span><span class="hljs-params">()</span> </span>&#123;        List&lt;CollegeEmployee&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;CollegeEmployee&gt;();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123; <span class="hljs-comment">//这里我们增加了10 个员工到list ，</span>            CollegeEmployee emp = <span class="hljs-keyword">new</span> CollegeEmployee();            emp.setId(<span class="hljs-string">"学院员工id "</span> + i);            list.add(emp);        &#125;        <span class="hljs-keyword">return</span> list;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printCollegeEmployee</span><span class="hljs-params">()</span> </span>&#123;        List&lt;CollegeEmployee&gt; list1 = <span class="hljs-keyword">this</span>.getAllEmployee();        System.out.println(<span class="hljs-string">"---学院员工----"</span>);        <span class="hljs-keyword">for</span> (CollegeEmployee e : list1) &#123;            System.out.println(e.getId());        &#125;    &#125;&#125;<span class="hljs-comment">//学校总部员工类</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SchoolEmployee</span> </span>&#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(String id)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;    &#125;&#125;<span class="hljs-comment">//学校管理类</span><span class="hljs-comment">//TODO 直接朋友 Employee CollegeManager</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SchoolManager</span> </span>&#123;    <span class="hljs-comment">//返回学校总部的员工</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SchoolEmployee&gt; <span class="hljs-title">getAllEmployee</span><span class="hljs-params">()</span> </span>&#123;        List&lt;SchoolEmployee&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;SchoolEmployee&gt;();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123; <span class="hljs-comment">//这里我们增加了5个员工到list</span>            SchoolEmployee emp = <span class="hljs-keyword">new</span> SchoolEmployee();            emp.setId(<span class="hljs-string">"学校总部员工id= "</span> + i);            list.add(emp);        &#125;        <span class="hljs-keyword">return</span> list;    &#125;    <span class="hljs-comment">//该方法完成输出学校总部和学院员工信息(id)</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printAllEmployee</span><span class="hljs-params">(CollegeManager sub)</span> </span>&#123;        <span class="hljs-comment">//获取到学院员工</span>        <span class="hljs-comment">//TODO 非直接朋友 CollegeEmployee  应该提取到  CollegeManager</span><span class="hljs-comment">//        List&lt;CollegeEmployee&gt; list1 = sub.getAllEmployee();</span><span class="hljs-comment">//        System.out.println("---学院员工----");</span><span class="hljs-comment">//        for (CollegeEmployee e : list1) &#123;</span><span class="hljs-comment">//            System.out.println(e.getId());</span><span class="hljs-comment">//        &#125;</span>        sub.printCollegeEmployee();<span class="hljs-comment">//只提供方法，不把具体实现放在其他类里面。</span>        <span class="hljs-comment">//获取到学校总部员工</span>        List&lt;SchoolEmployee&gt; list2 = <span class="hljs-keyword">this</span>.getAllEmployee();        System.out.println(<span class="hljs-string">"------学校总部员工------"</span>);        <span class="hljs-keyword">for</span> (SchoolEmployee e : list2) &#123;            System.out.println(e.getId());        &#125;    &#125;&#125;</code></pre></div><h2 id="七、合成复用原则（Composite-Reuse）"><a href="#七、合成复用原则（Composite-Reuse）" class="headerlink" title="七、合成复用原则（Composite Reuse）"></a>七、合成复用原则（Composite Reuse）</h2><p>合成复用原则 尽量使用组合/聚合的方式，而不是使用继承。</p><ol><li>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</li><li>针对接口编程，而不是针对实现编程。</li><li>为了交互对象之间的松耦合设计而努力。</li></ol><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : lwj</span><span class="hljs-comment"> * createTime  : 2020/6/28 21:00</span><span class="hljs-comment"> * description : Reprint please indicate the source</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CompositeReuse</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        System.out.println(<span class="hljs-string">"------依赖------"</span>);        B b = <span class="hljs-keyword">new</span> B();        b.Operation1(<span class="hljs-keyword">new</span> A());        System.out.println(<span class="hljs-string">"------聚合------"</span>);        b.setA(<span class="hljs-keyword">new</span> A());        b.Operation2();        System.out.println(<span class="hljs-string">"------组合------"</span>);        b.Operation3();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation1</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"A Operation1"</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation2</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"A Operation2"</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation3</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"A Operation3"</span>);    &#125;&#125;<span class="hljs-comment">//如果只是需要用到 A类的方法，尽量不要使用继承。而是使用，依赖，聚合，组合的方式</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation1</span><span class="hljs-params">(A a)</span> </span>&#123;<span class="hljs-comment">//TODO 依赖</span>        a.Operation1();        a.Operation2();        a.Operation3();    &#125;    <span class="hljs-comment">//==============================================================</span>    A a;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setA</span><span class="hljs-params">(A a)</span> </span>&#123;        <span class="hljs-keyword">this</span>.a = a;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation2</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//TODO 聚合</span>        a.Operation1();        a.Operation2();        a.Operation3();    &#125;    <span class="hljs-comment">//==============================================================</span>    A a1 = <span class="hljs-keyword">new</span> A();    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation3</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//TODO 组合</span>        a1.Operation1();        a1.Operation2();        a1.Operation3();    &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>design pattern</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis使用 - 基于XML和注解</title>
    <link href="/2020/06/29/MyBatis%E4%BD%BF%E7%94%A8%20-%20%E5%9F%BA%E4%BA%8EXML%E5%92%8C%E6%B3%A8%E8%A7%A3/"/>
    <url>/2020/06/29/MyBatis%E4%BD%BF%E7%94%A8%20-%20%E5%9F%BA%E4%BA%8EXML%E5%92%8C%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是-MyBatis？"><a href="#什么是-MyBatis？" class="headerlink" title="什么是 MyBatis？"></a>什么是 MyBatis？</h3><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><h2 id="使用MyBatis"><a href="#使用MyBatis" class="headerlink" title="使用MyBatis"></a>使用MyBatis</h2><h3 id="1-准备数据库"><a href="#1-准备数据库" class="headerlink" title="1.准备数据库"></a>1.准备数据库</h3><div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> score(    sno           <span class="hljs-built_in">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">''</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>        primary <span class="hljs-keyword">key</span>,    <span class="hljs-keyword">name</span>          <span class="hljs-built_in">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">''</span> <span class="hljs-literal">null</span>,    <span class="hljs-keyword">Java</span>          <span class="hljs-built_in">int</span>(<span class="hljs-number">32</span>)                <span class="hljs-literal">null</span>,    C             <span class="hljs-built_in">int</span>(<span class="hljs-number">32</span>)                <span class="hljs-literal">null</span>,    Algorithm     <span class="hljs-built_in">int</span>(<span class="hljs-number">32</span>)                <span class="hljs-literal">null</span>,    LinearAlgebra <span class="hljs-built_in">int</span>(<span class="hljs-number">32</span>)                <span class="hljs-literal">null</span>,    English       <span class="hljs-built_in">int</span>(<span class="hljs-number">32</span>)                <span class="hljs-literal">null</span>,    PE            <span class="hljs-built_in">int</span>(<span class="hljs-number">32</span>)                <span class="hljs-literal">null</span>);</code></pre></div><p>在表里添加几条数据</p><div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`userinfo`</span>.<span class="hljs-string">`score`</span>(<span class="hljs-string">`sno`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`Java`</span>, <span class="hljs-string">`C`</span>, <span class="hljs-string">`Algorithm`</span>, <span class="hljs-string">`LinearAlgebra`</span>, <span class="hljs-string">`English`</span>, <span class="hljs-string">`PE`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'20180861200'</span>, <span class="hljs-string">'张三'</span>, <span class="hljs-number">60</span>, <span class="hljs-number">90</span>, <span class="hljs-number">61</span>, <span class="hljs-number">70</span>, <span class="hljs-number">60</span>, <span class="hljs-number">60</span>);<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`userinfo`</span>.<span class="hljs-string">`score`</span>(<span class="hljs-string">`sno`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`Java`</span>, <span class="hljs-string">`C`</span>, <span class="hljs-string">`Algorithm`</span>, <span class="hljs-string">`LinearAlgebra`</span>, <span class="hljs-string">`English`</span>, <span class="hljs-string">`PE`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'20180861249'</span>, <span class="hljs-string">'王五'</span>, <span class="hljs-number">43</span>, <span class="hljs-number">65</span>, <span class="hljs-number">76</span>, <span class="hljs-number">33</span>, <span class="hljs-number">64</span>, <span class="hljs-number">76</span>);<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`userinfo`</span>.<span class="hljs-string">`score`</span>(<span class="hljs-string">`sno`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`Java`</span>, <span class="hljs-string">`C`</span>, <span class="hljs-string">`Algorithm`</span>, <span class="hljs-string">`LinearAlgebra`</span>, <span class="hljs-string">`English`</span>, <span class="hljs-string">`PE`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'20180861255'</span>, <span class="hljs-string">'李四'</span>, <span class="hljs-number">90</span>, <span class="hljs-number">80</span>, <span class="hljs-number">60</span>, <span class="hljs-number">30</span>, <span class="hljs-number">60</span>, <span class="hljs-number">100</span>);<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`userinfo`</span>.<span class="hljs-string">`score`</span>(<span class="hljs-string">`sno`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`Java`</span>, <span class="hljs-string">`C`</span>, <span class="hljs-string">`Algorithm`</span>, <span class="hljs-string">`LinearAlgebra`</span>, <span class="hljs-string">`English`</span>, <span class="hljs-string">`PE`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'20180861258'</span>, <span class="hljs-string">'john'</span>, <span class="hljs-number">23</span>, <span class="hljs-number">54</span>, <span class="hljs-number">21</span>, <span class="hljs-number">35</span>, <span class="hljs-number">87</span>, <span class="hljs-number">57</span>);<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`userinfo`</span>.<span class="hljs-string">`score`</span>(<span class="hljs-string">`sno`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`Java`</span>, <span class="hljs-string">`C`</span>, <span class="hljs-string">`Algorithm`</span>, <span class="hljs-string">`LinearAlgebra`</span>, <span class="hljs-string">`English`</span>, <span class="hljs-string">`PE`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'20180861259'</span>, <span class="hljs-string">'jack'</span>, <span class="hljs-number">41</span>, <span class="hljs-number">43</span>, <span class="hljs-number">54</span>, <span class="hljs-number">75</span>, <span class="hljs-number">43</span>, <span class="hljs-number">13</span>);<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`userinfo`</span>.<span class="hljs-string">`score`</span>(<span class="hljs-string">`sno`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`Java`</span>, <span class="hljs-string">`C`</span>, <span class="hljs-string">`Algorithm`</span>, <span class="hljs-string">`LinearAlgebra`</span>, <span class="hljs-string">`English`</span>, <span class="hljs-string">`PE`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'20180861260'</span>, <span class="hljs-string">'hellen'</span>, <span class="hljs-number">23</span>, <span class="hljs-number">34</span>, <span class="hljs-number">76</span>, <span class="hljs-number">99</span>, <span class="hljs-number">57</span>, <span class="hljs-number">97</span>);</code></pre></div><h3 id="2-新建一个-Maven-项目"><a href="#2-新建一个-Maven-项目" class="headerlink" title="2. 新建一个 Maven 项目"></a>2. 新建一个 Maven 项目</h3><p>将下面的依赖代码置于 pom.xml 文件中：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre></div><h3 id="3-新建一个-Mybatis-config-xml配置文件"><a href="#3-新建一个-Mybatis-config-xml配置文件" class="headerlink" title="3. 新建一个 Mybatis-config.xml配置文件"></a>3. 新建一个 Mybatis-config.xml配置文件</h3><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><span class="hljs-meta"><span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><span class="hljs-meta"><span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">"development"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"development"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"JDBC"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"POOLED"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driver"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://localhost:3306/userinfo?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf-8<span class="hljs-symbol">&amp;amp;</span>useSSL=true<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"LWJLWJ20000829"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"mapper/ScoreMapper.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre></div><p>还有很多可以在 XML 文件中配置的选项，上面的示例仅罗列了最关键的部分。 environment 元素体中包含了事务管理和连接池的配置。mappers 元素则包含了一组映射器（mapper），这些映射器的 XML 映射文件包含了 SQL 代码和映射定义信息。</p><h3 id="4-获取SqlSessionFactory"><a href="#4-获取SqlSessionFactory" class="headerlink" title="4. 获取SqlSessionFactory"></a>4. 获取SqlSessionFactory</h3><p>每个基于 MyBatis 的应用都是以一个 <strong>SqlSessionFactory</strong> 的实例为核心的。<strong>SqlSessionFactory</strong>的实例可以通过 <strong>SqlSessionFactoryBuilder</strong> 获得。而 <strong>SqlSessionFactoryBuilder</strong> 则可以从 XML 配置文件来构建出 SqlSessionFactory 实例。</p><p>从 XML 文件中构建 <strong>SqlSessionFactory</strong> 的实例非常简单，建议使用类路径下的资源文件进行配置。 但也可以使用任意的输入流（InputStream）实例。MyBatis 中有一个 <strong>Resources</strong> 的工具类，它包含一些实用方法，使得从类路径或其它位置加载资源文件更加容易。但是在这里我是用自定义工具类来获取。</p><ul><li>在utils包下新建MyBatisUtils工具类<br><img src="https://www.lwjppz.cn/upload/2020/6/image-a66e9bbd27a3483dbea4b71515616c65.png" srcset="/img/loading.gif" alt="image.png"></li><li>加入以下代码<div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>      : lwj</span><span class="hljs-comment"> * createTime  : 2020/6/29 14:05</span><span class="hljs-comment"> * description : Reprint please indicate the source</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisUtils</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;    <span class="hljs-keyword">static</span> &#123;        InputStream inputStream = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 使用MyBatis 从 XML 文件中构建 SqlSessionFactory 的实例</span>            String resource = <span class="hljs-string">"mybatis-config.xml"</span>;            inputStream = Resources.getResourceAsStream(resource);            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 有了 SqlSessionFactory，可以从中获得 SqlSession 的实例。SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> SqlSession对象</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();    &#125;&#125;</code></pre></div></li></ul><h3 id="从-SqlSessionFactory-中获取-SqlSession，执行-SQl-语句"><a href="#从-SqlSessionFactory-中获取-SqlSession，执行-SQl-语句" class="headerlink" title="从 SqlSessionFactory 中获取 SqlSession，执行 SQl 语句"></a>从 SqlSessionFactory 中获取 SqlSession，执行 SQl 语句</h3><p>既然有了 <strong>SqlSessionFactory</strong>，顾名思义，我们可以从中获得 <strong>SqlSession</strong>的实例。<strong>SqlSession</strong> 提供了在数据库执行 SQL 命令所需的所有方法。可以通过 <strong>SqlSession</strong> 实例来直接执行已映射的 SQL 语句。</p><ol><li><p>准备实体类，MyBatis 应用了 <strong>ORM（对象关系映射）</strong> 思想，实体类字段应于数据库字段一一对应</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : lwj</span><span class="hljs-comment"> * createTime  : 2020/6/29 14:15</span><span class="hljs-comment"> * description : Reprint please indicate the source</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Score</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;    <span class="hljs-keyword">private</span> String sno;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Integer Java;    <span class="hljs-keyword">private</span> Integer C;    <span class="hljs-keyword">private</span> Integer Algorithm;    <span class="hljs-keyword">private</span> Integer LinearAlgebra;    <span class="hljs-keyword">private</span> Integer English;    <span class="hljs-keyword">private</span> Integer PE;&#125;</code></pre></div><p>其余方法请自行补充</p><ol start="2"><li>在 <strong>dao</strong> 包下新建 ScoreMapper，<div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.lwjppz.entites.Score;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : lwj</span><span class="hljs-comment"> * createTime  : 2020/6/29 14:21</span><span class="hljs-comment"> * description : Reprint please indicate the source</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ScoreMapper</span> </span>&#123;    <span class="hljs-function">List&lt;Score&gt; <span class="hljs-title">getAllScores</span><span class="hljs-params">()</span></span>;&#125;</code></pre></div></li></ol></li><li><p>在 <strong>resources</strong> 下新建 <strong>mapper</strong> 文件夹，在此文件夹下新建 ScoreMapper.xml<br><img src="https://www.lwjppz.cn/upload/2020/6/image-177a6fa94929407887a659baa22b7997.png" srcset="/img/loading.gif" alt="image.png"></p></li></ol><p><strong>需要注意：</strong><br><img src="https://www.lwjppz.cn/upload/2020/6/image-76c77cbef5b44ab8bff90684916745f8.png" srcset="/img/loading.gif" alt="image.png"><br>     - namespace：对应刚刚写的那个映射语句类 - <strong>ScoreMapper</strong> （需写全类名）<br>     - id：对应 <strong>ScoreMapper</strong> 中的 <strong>getAllScores</strong> 方法<br>     - resultType：查询结果类型</p><ol start="4"><li>编写测试类测试：<div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.lwjppz.dao.ScoreMapper;<span class="hljs-keyword">import</span> cn.lwjppz.entites.Score;<span class="hljs-keyword">import</span> cn.lwjppz.utils.MyBatisUtils;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : lwj</span><span class="hljs-comment"> * createTime  : 2020/6/29 14:55</span><span class="hljs-comment"> * description : Reprint please indicate the source</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainTest</span> </span>&#123;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;        SqlSession sqlSession = MyBatisUtils.getSqlSession();        ScoreMapper scoreMapper = sqlSession.getMapper(ScoreMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        List&lt;Score&gt; scores = scoreMapper.getAllScores();        <span class="hljs-keyword">for</span> (Score score: scores) &#123;            System.out.println(score);        &#125;    &#125;&#125;</code></pre></div></li><li>测试结果<br><img src="https://www.lwjppz.cn/upload/2020/6/image-a495ae4bc00149f397ad8a26010923af.png" srcset="/img/loading.gif" alt="image.png"></li></ol><h4 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h4><p>使用注解的方法很简单，只需在 <strong>ScoreMapper</strong> 中的 <strong>getAllScores</strong> 方法上加入 <strong>Select</strong> 注解<br><img src="https://www.lwjppz.cn/upload/2020/6/image-9e72e0b0cdb947a196c672cf4640471a.png" srcset="/img/loading.gif" alt="image.png"></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ScoreMapper</span> </span>&#123;    <span class="hljs-meta">@Select</span>(<span class="hljs-string">"SELECT * FROM score"</span>)    <span class="hljs-function">List&lt;Score&gt; <span class="hljs-title">getAllScores</span><span class="hljs-params">()</span></span>;&#125;</code></pre></div><p>删除 <strong>ScoreMapper.xml</strong> 中的 select 标签</p><p><img src="https://www.lwjppz.cn/upload/2020/6/image-76f46a04112b4a7f9ac15d88dbf2b50f.png" srcset="/img/loading.gif" alt="image.png"></p><p>测试通过</p><p><img src="https://www.lwjppz.cn/upload/2020/6/image-301227922c1e4b399c140c5dfe5e9532.png" srcset="/img/loading.gif" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用注解来映射简单语句会使代码显得更加简洁，但对于稍微复杂一点的语句，Java 注解不仅力不从心，还会让你本就复杂的 SQL 语句更加混乱不堪。 因此，如果你需要做一些很复杂的操作，最好用 XML 来映射语句。</p><p>选择何种方式来配置映射，以及认为是否应该要统一映射语句定义的形式，完全取决于你和你的团队。 换句话说，永远不要拘泥于一种方式，你可以很轻松的在基于注解和 XML 的语句映射方式间自由移植和切换。</p>]]></content>
    
    
    <categories>
      
      <category>MyBatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eternal</title>
    <link href="/2020/06/21/Eternal/"/>
    <url>/2020/06/21/Eternal/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><a href="https://github.com/halo-dev" target="_blank">Eternal</a></h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>Eternal</strong> <code>[ɪˈtɜːrnl]</code>，意为永恒。</p><p>一个清新简约的博客系统，可适配多主题</p><blockquote><p><a href="http://39.106.117.247/" target="_blank" rel="noopener">预览地址</a></p></blockquote><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><blockquote><p>本项目只是为了个人使用而开发，<br>项目起初是很简陋的，后来由于学校课程各种设计，所以博客的功能越来越多，也越来越完善，有兴趣的童鞋可以看看</p></blockquote><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><ul><li>项目采用Vue + SpringBoot开发，对于练习SpringBoot和Vue是个不错的练手项目</li><li>后台管理使用Vue + ant-design-vue搭建，后台是通用模板，当然如果不喜欢的话可以独立开发，对于其他功能并不影响</li><li>前台使用thymeleaf模板引擎渲染，可通过api进行主题适配</li><li>…………..</li></ul><h2 id="预览图"><a href="#预览图" class="headerlink" title="预览图"></a>预览图</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.loli.net/2020/06/28/sJYBuHCA8DX6mjr.png" srcset="/img/loading.gif" alt=""></h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://i.loli.net/2020/06/28/4MGgua3qVcK9Q8f.png" srcset="/img/loading.gif" alt=""></h2><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="https://i.loli.net/2020/06/28/4lb6KwjnveS9REk.png" srcset="/img/loading.gif" alt=""></h2><h2 id="-3"><a href="#-3" class="headerlink" title=""></a><img src="https://i.loli.net/2020/06/28/njVu791hOPgxedt.png" srcset="/img/loading.gif" alt=""></h2><h2 id="-4"><a href="#-4" class="headerlink" title=""></a><img src="https://i.loli.net/2020/06/28/Cnva7NUES5w4lsu.png" srcset="/img/loading.gif" alt=""></h2><h2 id="-5"><a href="#-5" class="headerlink" title=""></a><img src="https://i.loli.net/2020/06/28/g5MN1kl4K9pz6da.png" srcset="/img/loading.gif" alt=""></h2><h2 id="-6"><a href="#-6" class="headerlink" title=""></a><img src="https://i.loli.net/2020/06/28/GjImg7lX6preMW8.png" srcset="/img/loading.gif" alt=""></h2><p><img src="https://i.loli.net/2020/06/28/JPf6GazQmbyOD89.png" srcset="/img/loading.gif" alt=""></p><hr>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Eternal</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记</title>
    <link href="/2020/06/21/ASP.NET%20MVC%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/06/21/ASP.NET%20MVC%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="ASP-NET-MVC"><a href="#ASP-NET-MVC" class="headerlink" title="ASP.NET MVC"></a>ASP.NET MVC</h1><h3 id="1-数据的验证"><a href="#1-数据的验证" class="headerlink" title="1. 数据的验证"></a>1. 数据的验证</h3><ol><li>在Models文件夹下，为需要验证的model类中加入 </li></ol><p><strong>using System.ComponentModel.DataAnnotations;</strong> 命名空间的引入</p><ol start="2"><li><p>添加注解：</p><ul><li><p>显示自定义名称</p><div class="hljs"><pre><code class="hljs cs">[<span class="hljs-meta">Display(Name = <span class="hljs-meta-string">"标题"</span>)</span>]<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Title &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</code></pre></div></li><li><p>使用正则表达式验证输入的字符串是否符合格式要求。</p><div class="hljs"><pre><code class="hljs C#">[RegularExpression(@&quot;^\w+([-+.]\w+)\*@\w+([-.]\w+)\*\.\w+([-.]\w+)\*$&quot;, ErrorMessage &#x3D; &quot;邮箱不正确&quot;)]public string Email &#123; get; set; &#125;</code></pre></div></li><li><p>Required特性，则此项为必填项。用于不为空校验。默认为不允许为空。允许为空则添加AllowEmptyStrings = true</p><div class="hljs"><pre><code class="hljs cs">[<span class="hljs-meta">Required(ErrorMessage = <span class="hljs-meta-string">"密码不能为空"</span>)</span>]<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Password &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</code></pre></div></li><li><p>限定字符串长度。</p><div class="hljs"><pre><code class="hljs cs">[<span class="hljs-meta">StringLength(20,ErrorMessage = <span class="hljs-meta-string">"密码不能超过20个字符"</span>)</span>]<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Password &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</code></pre></div></li><li><p>用来判断两个属性是否拥有相同的值。例如，确保两次输入的密码相同。比较两个值是否一致，一般用于二次输入。<strong>Password</strong>是需要比较的值</p><div class="hljs"><pre><code class="hljs cs">[<span class="hljs-meta">Compare(<span class="hljs-meta-string">"Password"</span>,ErrorMessage = <span class="hljs-meta-string">"两次输入不一致"</span>)</span>]<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> PasswordConfirm &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</code></pre></div><p>以上验证将对PasswordConfirm和Password进行是否一致的比较。</p></li><li><p><strong>Remote</strong>利用服务器端的回调函数执行客户端的逻辑验证。这个在登录的时候用的非常多。比如你的用户名ID是否已经被注册</p><p>需要添加 <strong>using System.Web.Mvc;</strong></p><div class="hljs"><pre><code class="hljs cs">[<span class="hljs-meta">Remote(<span class="hljs-meta-string">"CheckUserName"</span>,<span class="hljs-meta-string">"Home"</span>,ErrorMessage = <span class="hljs-meta-string">"用户名已被注册"</span>)</span>]<span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> UserName &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</code></pre></div><p>然后在<strong>Home</strong>这个Controller里面添加<strong>CheckUserName</strong>方法，判断用户名是否存在需要从数据库读取判断，此处只是demo</p><div class="hljs"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> ActionResult CheckUserName()&#123;    string LastName = Request[<span class="hljs-string">"LastName"</span>];    <span class="hljs-keyword">if</span> (<span class="hljs-string">"admin"</span>.Equals(LastName))        <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">Json</span><span class="hljs-params">(<span class="hljs-keyword">false</span>, JsonRequestBehavior.AllowGet)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">Json</span><span class="hljs-params">(<span class="hljs-keyword">true</span>, JsonRequestBehavior.AllowGet)</span></span>;&#125;</code></pre></div></li></ul></li><li><p>添加视图，在视图页面确保已添加 <strong>Jquery库、Jquery.Validate、Jquery.Validate.unobtrusive这三个文件。</strong></p><h5 id="小贴士：在创建视图时选择-Create-模板，自带上面这三个，亲测有用哦。"><a href="#小贴士：在创建视图时选择-Create-模板，自带上面这三个，亲测有用哦。" class="headerlink" title="小贴士：在创建视图时选择 Create 模板，自带上面这三个，亲测有用哦。"></a>小贴士：在创建视图时选择 <strong><em>Create</em></strong> 模板，自带上面这三个，亲测有用哦。</h5><p><img src="https://i.loli.net/2020/06/21/fQ569yNbk3dTSDJ.png" srcset="/img/loading.gif" alt="QQ截图20200621091244.png"></p></li></ol><h3 id="2-Action过滤器"><a href="#2-Action过滤器" class="headerlink" title="2. Action过滤器"></a>2. Action过滤器</h3><h5 id="自定义Actioon过滤器"><a href="#自定义Actioon过滤器" class="headerlink" title="自定义Actioon过滤器"></a>自定义Actioon过滤器</h5><ol><li>首先新建Filters文件夹，在Filters下新建如下图所示</li></ol><p><img src="https://i.loli.net/2020/06/21/4OYxz9wnPNgbQVv.png" srcset="/img/loading.gif" alt="filter.png"></p><div class="hljs"><pre><code class="hljs cs"><span class="hljs-keyword">using</span> System;<span class="hljs-keyword">using</span> System.Collections.Generic;<span class="hljs-keyword">using</span> System.Linq;<span class="hljs-keyword">using</span> System.Web;<span class="hljs-keyword">using</span> System.Web.Mvc;<span class="hljs-keyword">namespace</span> <span class="hljs-title">Demo.Filters</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyActionFilterAttribute</span> : <span class="hljs-title">ActionFilterAttribute</span>    &#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Message &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnActionExecuting</span>(<span class="hljs-params">ActionExecutingContext filterContext</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-keyword">base</span>.OnActionExecuting(filterContext);            filterContext.HttpContext.Response.Write(<span class="hljs-string">"Action执行之前"</span> + Message + <span class="hljs-string">"&lt;br /&gt;"</span>);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnActionExecuted</span>(<span class="hljs-params">ActionExecutedContext filterContext</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-keyword">base</span>.OnActionExecuted(filterContext);            filterContext.HttpContext.Response.Write(<span class="hljs-string">"Action执行之后"</span> + Message + <span class="hljs-string">"&lt;br /&gt;"</span>);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnResultExecuting</span>(<span class="hljs-params">ResultExecutingContext filterContext</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-keyword">base</span>.OnResultExecuting(filterContext);            filterContext.HttpContext.Response.Write(<span class="hljs-string">"返回Result之前"</span> + Message + <span class="hljs-string">"&lt;br /&gt;"</span>);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnResultExecuted</span>(<span class="hljs-params">ResultExecutedContext filterContext</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-keyword">base</span>.OnResultExecuted(filterContext);            filterContext.HttpContext.Response.Write(<span class="hljs-string">"返回Result之后"</span> + Message + <span class="hljs-string">"&lt;br /&gt;"</span>);        &#125;    &#125;&#125;</code></pre></div><ol start="2"><li><p>在需要的控制器下添加方法</p><div class="hljs"><pre><code class="hljs aspectj">[MyActionFilter] <span class="hljs-comment">//也可以加参数 [MyActionFilter(Message="lwjppz")]</span><span class="hljs-keyword">public</span> ActionResult ActionFilterDemo()&#123;    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">View</span><span class="hljs-params">()</span></span>;&#125;</code></pre></div></li></ol><p>添加视图后，运行结果：</p><p><img src="https://i.loli.net/2020/06/21/9ftKIJz8onX3OFm.png" srcset="/img/loading.gif" alt="filter.png"></p><h3 id="3-Authorization过滤器"><a href="#3-Authorization过滤器" class="headerlink" title="3. Authorization过滤器"></a>3. Authorization过滤器</h3><p>在MVC中使用AuthorizeAttribute实现登陆和权限控制。</p><p>在执行需要登录和权限的Action前先判断用户是否登陆，若没登陆就跳转到登陆页，然后再判断用户是否有权限访问该Action对应的视图页面，若没有则跳转到特定提示页。</p><h4 id="范例："><a href="#范例：" class="headerlink" title="范例："></a>范例：</h4><p>先添加一个控制器AccountController：</p><div class="hljs"><pre><code class="hljs c#">public class AccountController : Controller&#123;    public ActionResult Index()    &#123;      return View();    &#125;&#125;</code></pre></div><p>然后再web.config文件中的&lt;system.web&gt;节中添加：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">authentication</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">"Forms"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">forms</span> <span class="hljs-attr">loginUrl</span>=<span class="hljs-string">"~/Account/Index"</span> <span class="hljs-attr">timeout</span>=<span class="hljs-string">"2880"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">authentication</span>&gt;</span></code></pre></div><p>用来启用登录和权限验证，当用户未登录时将跳转到loginUrl指定的页面。</p><p>Forms 身份验证将身份验证标记保留在 Cookie 或页的 URL 中。Forms 身份验证通过 FormsAuthenticationModule 类参与到 ASP.NET 页面的生命周期中。可以通过 FormsAuthentication 类访问 Forms 身份验证信息和功能。</p><p>然后，在filterConfig.cs文件中的RegisterGlobalFilters方法中添加：</p><div class="hljs"><pre><code class="hljs c#">public static void RegisterGlobalFilters(GlobalFilterCollection filters)&#123;    filters.Add(new HandleErrorAttribute());    filters.Add(new AuthorizeAttribute());&#125;</code></pre></div><p>运行程序，当访问Home控制器下的Index页面时会跳转到Account控制器的Index页面，显示如下页面：</p><p><img src="http://p.ananas.chaoxing.com/star3/origin/85eb06c7b5d28967a657a407f9c4c8bb.png" srcset="/img/loading.gif" alt="img"><br>某一些页面是需要未登录也能访问的，此时我们可以在相应的Action上添加匿名登录标记[<strong>AllowAnonymous</strong>]，例如上面的Home控制器中的Index页面和Account控制器中的Index页面都需要匿名访问权限：</p><div class="hljs"><pre><code class="hljs c#">[AllowAnonymous]public ActionResult Index()&#123;    return View();&#125;</code></pre></div><p>此时再访问Home控制器中的Index页面就能正常显示了。</p><p>需要注意的是，如果在能够匿名访问的页面中嵌套了需要登录和权限的子页面，则匿名访问的页面不能正常显示。例如：</p><p>在Home控制器中的Index视图页面中嵌套了@{Html.RenderAction(“ChildActionOnly”);}语句，即内嵌了ChildActionOnly页面，而该页面是需要登录才能访问的，则Index页面也不能正常显示。</p><p>此时再运行程序，访问需要登录的页面时会跳转到登录页面：</p><p><img src="http://p.ananas.chaoxing.com/star3/origin/815dad3c682f9cb2b3bfb25b1f0f282c.png" srcset="/img/loading.gif" alt="img">注意，如果Account控制器的Index登录页面没有匿名访问标记则会提示错误：</p><p><img src="http://p.ananas.chaoxing.com/star3/origin/85eb06c7b5d28967a657a407f9c4c8bb.png" srcset="/img/loading.gif" alt="img"></p><h4 id="登录系统"><a href="#登录系统" class="headerlink" title="登录系统"></a>登录系统</h4><p>登录的控制器中在用户名和密码验证成功之后，应添加代码</p><p><strong>FormsAuthentication.SetAuthCookie(username, false);</strong></p><p>可用User.Identity.Name来获取当前的登录名，如：</p><p><strong>string userid = HttpContext.User.Identity.Name;</strong></p><h5 id="范例：-1"><a href="#范例：-1" class="headerlink" title="范例："></a>范例：</h5><p>修改Account控制器中的Index方法：</p><div class="hljs"><pre><code class="hljs cs">[<span class="hljs-meta">AllowAnonymous</span>]<span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">Index</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">string</span> returnURL = Request[<span class="hljs-string">"ReturnUrl"</span>];    ViewBag.returnURL = returnURL;    <span class="hljs-keyword">return</span> View();&#125;</code></pre></div><p>在Account控制器中添加一个Action，用于校验用户输入的用户名和密码是否正确：      </p><div class="hljs"><pre><code class="hljs reasonml"><span class="hljs-literal">[A<span class="hljs-identifier">llowAnonymous</span>]</span>public ActionResult <span class="hljs-constructor">Login(<span class="hljs-params">string</span> <span class="hljs-params">username</span>,<span class="hljs-params">string</span> <span class="hljs-params">password</span>,<span class="hljs-params">string</span> <span class="hljs-params">returnURL</span>)</span>&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-string">"admin"</span>.<span class="hljs-constructor">Equals(<span class="hljs-params">username</span>)</span><span class="hljs-operator"> &amp;&amp; </span><span class="hljs-string">"123456"</span>.<span class="hljs-constructor">Equals(<span class="hljs-params">password</span>)</span>)    &#123;        FormsAuthentication.<span class="hljs-constructor">SetAuthCookie(<span class="hljs-params">username</span>, <span class="hljs-params">false</span>)</span>;<span class="hljs-comment">//设置用户登录成功（设置cookie），false表示cookie不要持久保存**</span>        <span class="hljs-keyword">if</span> (Url.<span class="hljs-constructor">IsLocalUrl(<span class="hljs-params">returnURL</span>)</span>)        &#123;            return <span class="hljs-constructor">Redirect(<span class="hljs-params">returnURL</span>)</span>;        &#125;        return <span class="hljs-constructor">RedirectToAction(<span class="hljs-string">"Index"</span>,<span class="hljs-string">"Home"</span>)</span>;    &#125;    return <span class="hljs-constructor">View()</span>;&#125;</code></pre></div><p>此时再访问需要登录才能访问的页面会跳转到登录页面，在登录页面输入正确的用户名和密码后就可以访问所有需要登录才能访问的页面了。</p><h5 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h5><p>使用如下的语句来退出登录：</p><p>FormsAuthentication.SignOut();//通过Forms验证来删除Cookie</p><h5 id="权限的验证"><a href="#权限的验证" class="headerlink" title="权限的验证"></a>权限的验证</h5><p>可以指定某个Controller或某个Action只能由指定的用户或角色访问。</p><h5 id="指定特定用户访问"><a href="#指定特定用户访问" class="headerlink" title="指定特定用户访问"></a>指定特定用户访问</h5><p>可以使用[Authorize(Users=”登录的用户名”)]的方式来限定。</p><p>如果可以由多个用户访问，在不同用户间用逗号分隔。</p><h5 id="范例：-2"><a href="#范例：-2" class="headerlink" title="范例："></a>范例：</h5><p>在Home控制器中修改Action：</p><p>在一个Action前面加上：</p><p><strong>[Authorize(Users=”admin”)]</strong></p><p>表示该Action只能由用户admin访问。</p><p>在另一个Action前面加上：</p><p><strong>[Authorize(Users=”sysadmin”)]</strong></p><p>表示该Action只能由用户sysadmin访问。</p><h5 id="指定特定角色访问"><a href="#指定特定角色访问" class="headerlink" title="指定特定角色访问"></a>指定特定角色访问</h5><p>可以使用[Authorize(Roles=”登录的用户名所属的角色”)]的方式来限定。</p><p>如果可以由多个角色访问，在不同角色间用逗号分隔。</p><h5 id="范例：-3"><a href="#范例：-3" class="headerlink" title="范例："></a>范例：</h5><p>在Home控制器中修改Action：</p><p>在一个Action前面加上：</p><p><strong>[Authorize(Roles=”admin”)]</strong></p><p>表示该Action只能由角色admin访问。</p><p>在另一个Action前面加上：</p><p><strong>[Authorize(Roles=”sysadmin”)]</strong></p><p>表示该Action只能由角色sysadmin访问。</p><p>需要注意的是：</p><p>1、我们必须实现自己的RoleProvider，主要是从RoleProvider这个抽象类派生出自己的子类，并重写其中的GetRolesForUser方法：</p><div class="hljs"><pre><code class="hljs c#">public class CustomRoleProvider:RoleProvider&#123;    public override string[] GetRolesForUser(string username)    &#123;        var cookie &#x3D; HttpContext.Current.Request.Cookies[FormsAuthentication.FormsCookieName];        var ticket &#x3D; FormsAuthentication.Decrypt(cookie.Value);        string role &#x3D; ticket.UserData;        return role.Split(&#39;,&#39;);    &#125;    public override void AddUsersToRoles(string[] usernames, string[] roleNames)    &#123;        throw new NotImplementedException();    &#125;    public override string ApplicationName    &#123;        get &#123;            throw new NotImplementedException();        &#125;        set &#123;            throw new NotImplementedException();        &#125;    &#125;    public override void CreateRole(string roleName)    &#123;        throw new NotImplementedException();    &#125;    public override bool DeleteRole(string roleName, bool throwOnPopulatedRole)    &#123;        throw new NotImplementedException();    &#125;    public override string[] FindUsersInRole(string roleName, string usernameToMatch)    &#123;        throw new NotImplementedException();    &#125;    public override string[] GetAllRoles()    &#123;        throw new NotImplementedException();    &#125;    public override string[] GetUsersInRole(string roleName)    &#123;        throw new NotImplementedException();    &#125;        public override bool IsUserInRole(string username, string roleName)    &#123;        throw new NotImplementedException();    &#125;    public override void RemoveUsersFromRoles(string[] usernames, string[] roleNames)    &#123;        throw new NotImplementedException();    &#125;    public override bool RoleExists(string roleName)    &#123;        throw new NotImplementedException();    &#125;&#125;</code></pre></div><p>2、必须修改web.config文件中的设置：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">roleManager</span> <span class="hljs-attr">enabled</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">defaultProvider</span>=<span class="hljs-string">"CustomRoleProvider"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">providers</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">clear</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">add</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"CustomRoleProvider"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"FilterDemo.Filters.CustomRoleProvider"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">providers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">roleManager</span>&gt;</span></code></pre></div><p>注意：这里type必须改成自己的命名空间.文件夹.类名。name的值可以与类名不同。但必须保证defaultProvider的值必须是下面add中某个name的值。</p><p>3、在登录验证的Action中自己定义cookie来存放用户名和角色信息：</p><div class="hljs"><pre><code class="hljs cs">[<span class="hljs-meta">AllowAnonymous</span>]<span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">Logon</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> username, <span class="hljs-keyword">string</span> password, <span class="hljs-keyword">string</span> returnUrl</span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-string">"admin"</span>.Equals(username) &amp;&amp; <span class="hljs-string">"123456"</span>.Equals(password))    &#123;        <span class="hljs-keyword">string</span> role = <span class="hljs-string">"admin,sysadmin"</span>;        <span class="hljs-keyword">var</span> authTicket = <span class="hljs-keyword">new</span> FormsAuthenticationTicket(            <span class="hljs-number">1</span>,               <span class="hljs-comment">// 版本</span>            username,           <span class="hljs-comment">// 用户名称</span>            DateTime.Now,         <span class="hljs-comment">// 创建日期</span>            DateTime.Now.AddMinutes(<span class="hljs-number">20</span>),  <span class="hljs-comment">// 过期时间</span>            <span class="hljs-literal">false</span>,             <span class="hljs-comment">// 是否记住</span>            role              <span class="hljs-comment">// 用户角色</span>        );        <span class="hljs-keyword">string</span> encryptedTicket = FormsAuthentication.Encrypt(authTicket);        <span class="hljs-keyword">var</span> authCookie = <span class="hljs-keyword">new</span> HttpCookie(FormsAuthentication.FormsCookieName, encryptedTicket);        authCookie.HttpOnly = <span class="hljs-literal">true</span>;<span class="hljs-comment">//客户端脚本不能访问</span>        authCookie.Secure = FormsAuthentication.RequireSSL;<span class="hljs-comment">//是否仅用https传递cookie</span>        authCookie.Domain = FormsAuthentication.CookieDomain;<span class="hljs-comment">//与cookie关联的域</span>        authCookie.Path = FormsAuthentication.FormsCookiePath;<span class="hljs-comment">//cookie关联的虚拟路径</span>        Response.Cookies.Add(authCookie);        <span class="hljs-keyword">if</span> (Url.IsLocalUrl(returnUrl))        &#123;            <span class="hljs-keyword">return</span> Redirect(returnUrl);        &#125;        <span class="hljs-keyword">return</span> RedirectToAction(<span class="hljs-string">"Index"</span>, <span class="hljs-string">"Account"</span>);    &#125;    <span class="hljs-keyword">return</span> RedirectToAction(<span class="hljs-string">"Index"</span>, <span class="hljs-string">"Account"</span>);&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ASP.NET MVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ASP.NET MVC</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
